Time Complexity: O(N*logN)
Space Complexity: O(N), auxiliary stack space.

import java.util.*;

class QuickSortHoare {

    // Partition function using Hoare partition scheme
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[low];   // Choose first element as pivot
        int i = low;
        int j = high;

        while (i < j) {
            // Move i forward until element > pivot
            while (i < high && arr[i] <= pivot)
                i++;

            // Move j backward until element <= pivot
            while (j > low && arr[j] > pivot)
                j--;

            // Swap out-of-place elements
            if (i < j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap pivot into its correct position
        int temp = arr[low];
        arr[low] = arr[j];
        arr[j] = temp;

        return j; // return pivot index
    }

    // Recursive quicksort
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);

            // Recursively sort left and right parts
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 4, 2, 7, 1, 10};
        System.out.println("Before sorting: " + Arrays.toString(arr));

        quickSort(arr, 0, arr.length - 1);

        System.out.println("After sorting:  " + Arrays.toString(arr));
    }
}
