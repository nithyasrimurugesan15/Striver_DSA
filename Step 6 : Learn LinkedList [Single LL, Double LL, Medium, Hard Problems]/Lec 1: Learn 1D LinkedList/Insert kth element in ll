using prev:

class Node
{
    int data;
    Node next;
    Node(int data1,Node next1)
    {
        this.data=data1;
        this.next=next1;
    }
     Node(int data1)
    {
        this.data=data1;
        this.next=null;
    }
}
class ll 
{
    static Node cnvrtll(int[] arr) 
    {
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1;i<arr.length;i++)
        {
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;
        }
        return head;
    }
     static Node insertkth(Node head,int k,int val) 
     {
         Node fi=new Node(val);
         if (head == null) {           
            return fi;           
        }
       Node temp=head;
       Node prev=null;
       int cnt=0;
         while(temp.next!=null)
         {
             cnt++;
             if(cnt==k)
             {
                 prev.next=fi;
                 fi.next=temp;
             }
             prev=temp;
             temp=temp.next;
             
         }
         return head;
     }
    static void display(Node head) {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" -> ");
            temp=temp.next;
        }
         System.out.println("null");
    }
}
public class Main {
    public static void main(String[] args)
    {
        int[] arr={1,2,4,5,6};
        Node head=ll.cnvrtll(arr);
        System.out.println("Before inserting last: ");
       ll.display(head);
       head=ll.insertkth(head,3,9);
        System.out.println("After inserting last: ");
       ll.display(head);
    }
}

without using prev:


class Node
{
    int data;
    Node next;
    Node(int data1,Node next1)
    {
        this.data=data1;
        this.next=next1;
    }
     Node(int data1)
    {
        this.data=data1;
        this.next=null;
    }
}
class ll 
{
    static Node cnvrtll(int[] arr) 
    {
        Node head=new Node(arr[0]);
        Node mover=head;
        for(int i=1;i<arr.length;i++)
        {
            Node temp=new Node(arr[i]);
            mover.next=temp;
            mover=temp;
        }
        return head;
    }
     static Node insertkth(Node head,int k,int val) 
     {
         if(head==null)
         {
             if(k==1)
             {
                 return new Node(val);
             }
             else
             {
                 return head;
             }
         }
         if (k == 1) 
         {
            return new Node(val,head);
         }
       Node temp=head;
       int cnt=0;
         while(temp!=null)
         {
             cnt++;
             if(cnt==(k-1))
             {
                 Node x=new Node(val,temp.next);
                 temp.next=x;
                 break;
             }
             temp=temp.next;
             
         }
         return head;
     }
    static void display(Node head) {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" -> ");
            temp=temp.next;
        }
         System.out.println("null");
    }
}
public class Main {
    public static void main(String[] args)
    {
        int[] arr={12,5,8,7};
        Node head=ll.cnvrtll(arr);
        System.out.println("Before inserting kth: ");
       ll.display(head);
       head=ll.insertkth(head,3,100);
        System.out.println("After inserting kth: ");
       ll.display(head);
    }
}
