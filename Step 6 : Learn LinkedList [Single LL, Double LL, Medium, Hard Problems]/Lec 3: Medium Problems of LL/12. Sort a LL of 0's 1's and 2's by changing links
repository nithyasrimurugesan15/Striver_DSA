GFG : https://www.geeksforgeeks.org/problems/given-a-linked-list-of-0s-1s-and-2s-sort-it/1

Approach 1 : brute:

time : 2 traversals -> o(2n) -> o(n) and space : o(1)

class Solution {
    public Node segregate(Node head) {
        Node temp=head;
        int cnt0=0,cnt1=0,cnt2=0;
        while(temp!=null)
        {
            if(temp.data==0)
            {
                cnt0++;
            }
            else if(temp.data==1)
            {
                cnt1++;
            }
            else
            {
                cnt2++;
            }
            temp=temp.next;
        }
        temp=head;
        while(temp!=null)
        {
            if(cnt0!=0)
            { 
             temp.data=0;
             cnt0--;
            }
            else if(cnt1!=0)
            { 
             temp.data=1;
             cnt1--;
            }
            else
            { 
             temp.data=2;
             cnt2--;
            }
            temp=temp.next;
        }
        return head;
        
    }
}


Approach 2: optimal

time : 1 traversal -> o(n) and space : o(1)


class Solution {
    public Node segregate(Node head) {
    if(head==null || head.next==null)
    {
        return head;
    }
      Node zerohead= new Node(-1);
      Node onehead= new Node(-1);
      Node twohead= new Node(-1);
      Node zero=zerohead;
      Node one=onehead;
      Node two=twohead;
      Node temp=head;
      while(temp!=null)
      {
          if(temp.data==0)
          {
              zero.next=temp;
              zero=temp;
          }
          else if(temp.data==1)
          {
              one.next=temp;
              one=temp;
          }
          else
          {
              two.next=temp;
              two=temp;
          }
          temp=temp.next;
      }
      zero.next=(onehead.next!=null)?onehead.next:twohead.next;
      one.next=twohead.next;
      two.next=null;
      return zerohead.next;
      
    }
}


