Approach 1: with using prev

time : o(n) and space : o(1)

class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head==null || head.next==null)
        {
            return null;
        }
        ListNode fast=head;
        ListNode slow=head;
        ListNode prev=null;
        while(fast!=null && fast.next!=null)
        {
           prev=slow;
           slow=slow.next;
           fast=fast.next.next;
        }
        prev.next=slow.next;
        return head;
    }
}

Approach 1: without using prev

time : o(n) and space : o(1)

class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head==null || head.next==null)
        {
            return null;
        }
        ListNode fast=head;
        ListNode slow=head;
        fast=fast.next.next;
        while(fast!=null && fast.next!=null)
        {
           slow=slow.next;
           fast=fast.next.next;
        }
        slow.next=slow.next.next;
        return head;
    }
}
