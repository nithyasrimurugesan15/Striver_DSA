https://leetcode.com/problems/string-to-integer-atoi/description/

Normal approach :

o(n) and o(1)
class Solution 
{
    public int myAtoi(String s) 
    {
        s=s.trim();
        int sign=1;
        int i=0;
        int ans=0;
        if (s.length() == 0) return 0; 
        if(s.charAt(i) == '-')
        {
            sign=-1;
            i++;
        }
        else if(s.charAt(i)=='+')
        {
            i++;
        }
        while(i<s.length()&&Character.isDigit(s.charAt(i)))
        {
          int digit=s.charAt(i)-'0';
          if(ans>(Integer.MAX_VALUE-digit)/10){
            return (sign==1)?Integer.MAX_VALUE:Integer.MIN_VALUE;
          }
          ans=ans*10+digit;
           i++;
        }
        return (int) ans*sign;
    }
}


Using recursion :

// if i/t is very larger not use recursion...

o(n) and o(n)

class Solution {
    static final int INT_MIN = Integer.MIN_VALUE;
    static final int INT_MAX = Integer.MAX_VALUE;

    public int myAtoi(String s) {
        s = s.trim();
        if (s.isEmpty()) return 0;
        int i = 0;
        int sign = 1;

        if (s.charAt(i) == '+' || s.charAt(i) == '-') {
            sign = (s.charAt(i) == '-') ? -1 : 1;
            i++;
        }

        return helper(s, i, 0, sign);
    }

    private int helper(String s, int i, int num, int sign) {
        
        if (i >= s.length() || !Character.isDigit(s.charAt(i))) {
            return num * sign;
        }

        int digit = s.charAt(i) - '0';
        if (num > (INT_MAX - digit) / 10) {
            return (sign == 1) ? INT_MAX : INT_MIN;
        }

        num = num * 10 + digit;
        return helper(s, i + 1, num, sign);
    }
}

