https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/

Brute -> linear search -> o(n) and o(1)

class Solution {
    public boolean search(int[] nums, int target) {
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
                return true;
            }
        }
        return false;
    }
}

Optimal -> binary search -> o(logn) and o(1)

class Solution 
{
    public boolean search(int[] nums, int target) 
    {
        int s=0;
        int e=nums.length-1;
        while(s<=e)
        {
            int m=s+(e-s)/2;
            if(nums[m]==target)
            {
                return true;
            }
            if(nums[s]==nums[m] && nums[m]== nums[e])
            {
                s=s+1;
                e=e-1;
                continue;
            }
            else if(nums[s]<=nums[m])
            {
                   if(nums[s]<=target && target<=nums[m])
                   {
                    e=m-1;
                   }
                   else
                   {
                    s=m+1;
                   }
            }
            else
            {
                if(nums[m]<=target && target<=nums[e])
                   {
                     s=m+1;
                   }
                   else
                   {
                     e=m-1;
                   }
            }
        }
        return false;
    }
}
