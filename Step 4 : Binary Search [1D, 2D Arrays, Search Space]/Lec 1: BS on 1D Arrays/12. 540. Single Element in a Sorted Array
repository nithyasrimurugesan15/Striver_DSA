https://leetcode.com/problems/single-element-in-a-sorted-array/description/

Brute : o(n) and o(1) -> extreme brute

class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums.length==1)
        {
            return nums[0];
        }
        for(int i=0;i<nums.length;i++)
        {
            if(i==0)
            {
                if(nums[i]!=nums[i+1])
                {
                    return nums[i];
                }
            }
            else if(i==nums.length-1)
            {
                 if(nums[i]!=nums[i-1])
                {
                    return nums[i];
                }
            }
            else {
                if(nums[i]!=nums[i+1] && nums[i]!=nums[i-1])
                {
                   return nums[i];
                }
        }
        }
        return 0;
    }
}


Brute : o(n) and o(1) -> using xor

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int ans=0;
        for(int i=0;i<nums.length;i++)
        {
            ans^=nums[i];
            
        }
        return ans;
    }
}

optimal -> o(log n) and o(1) -> using binary search

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
        if(n==1)
        {
            return  nums[0];
        }
        if(nums[0]!=nums[1])
        {
            return  nums[0];
        }
        if(nums[n-1]!=nums[n-2])
        {
            return  nums[n-1];
        }
        int s=0;
        int e=nums.length-2;
        while(s<=e)
        {
            int m=s+(e-s)/2;

            if(nums[m]!=nums[m-1] && nums[m]!=nums[m+1])
            {
                return nums[m];
            }
            if((m%2==1 && nums[m]==nums[m-1]) || m%2==0 && nums[m]==nums[m+1])
            {
                s=m+1;
            }
            else
            {
                e=m-1;
            }
        }
        return -1;
    }
}




