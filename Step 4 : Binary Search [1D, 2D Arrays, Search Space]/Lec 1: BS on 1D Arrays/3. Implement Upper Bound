The upper bound of a target x in a sorted array is the first index where the element is strictly greater than x.

Brute : linear search

time o(n) and space o(1)

import java.util.*;
public class tUf {
public static int upperBound(int []arr, int n, int x) {
        for (int i = 0; i < n; i++) {
            if (arr[i] > x) {
                return i;
            }
        }
        return n;
    }
public static void main(String[] args) {
        int[] arr = {3, 5, 8, 15, 19};
        int n = 5, x = 9;
        int ind = upperBound(arr, n, x);
        System.out.println("The lower bound is the index: " + ind);
    }
}

Optimal : binear search

time o(n log n) and space o(1)

import java.util.*;
public class tUf {
public static int upperBound(int []arr, int n, int x) {
        int low = 0, high = n - 1;
        int ans = n;
    while (low <= high) {
            int mid = (low + high) / 2;
           if (arr[mid] > x) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1; 
            }
        }
        return ans;
    }
    public static void main(String[] args) {
        int[] arr = {3, 5, 8, 15, 19};
        int n = 5, x = 9;
        int ind = upperBound(arr, n, x);
        System.out.println("The lower bound is the index: " + ind);
    }
} 

