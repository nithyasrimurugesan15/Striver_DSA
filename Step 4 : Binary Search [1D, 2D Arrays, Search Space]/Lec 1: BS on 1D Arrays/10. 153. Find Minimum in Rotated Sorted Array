https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/

Brute : o(n) and o(1) -> linear

class Solution {
    public int findMin(int[] nums) {
        int minVal = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            minVal = Math.min(minVal, nums[i]);
        }
        return minVal;
    }
}

Brute : o(n log n) and o(1) -> using built-in sort

class Solution {
    public int findMin(int[] nums) {
        Arrays.sort(nums);
        return nums[0];
    }
}

optimal : o(log n) and o(1) -> binary search

class Solution {
    public int findMin(int[] nums) {
        int s=0;
        int e=nums.length-1;
        int ans=Integer.MAX_VALUE;
        while(s<=e)
        {
         int mid = s + (e - s) / 2;
         if(nums[s]<=nums[mid])
         {
            ans=Math.min(ans,nums[s]);
            s=mid+1;
         }
         else
         {
            ans=Math.min(ans,nums[mid]);
            e=mid-1;
         }
        }
        return ans;
    }
}


// PERFER
optimal : o(log n) and o(1) -> binary search

class Solution {
    public int findMin(int[] nums) {
        int s=0;
        int e=nums.length-1;
        while(s<e)
        {
         int mid = s + (e - s) / 2;
        if(nums[e]< nums[mid])
        {
            s=mid+1;
        }
        else
        {
           e=mid;
        }
        }
        return nums[s];
    }
}
