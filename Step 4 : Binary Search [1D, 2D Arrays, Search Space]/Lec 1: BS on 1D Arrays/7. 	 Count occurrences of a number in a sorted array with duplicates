Brute : o(n) and o(1)

import java.util.*;
public class tUf {
    public static int count(int arr[], int n, int x) {
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == x) cnt++;
        }
        return cnt;
    }

    public static void main(String[] args) {
        int[] arr =  {2, 4, 6, 8, 8, 8, 11, 13};
        int n = 8, x = 8;
        int ans = count(arr, n, x);
        System.out.println("The number of occurrences is: " + ans);
    }
}

optimal : o(log n) and o(1)

class Solution {
    public void searchRange(int[] arr, int t) {
        int[] ans = {-1, -1};
        ans[0] = find(arr, t, true);  
        ans[1] = find(arr, t, false); 

        int cnt = count(ans[0], ans[1]);
        System.out.println("Count of " + t + " = " + cnt);
    }

    static int find(int[] arr, int t, boolean isFirst) {
        int s = 0, e = arr.length - 1;
        int ans = -1;
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (arr[mid] == t) {
                ans = mid;
                if (isFirst) e = mid - 1;
                else s = mid + 1;
            } else if (t < arr[mid]) e = mid - 1;
            else s = mid + 1;
        }
        return ans;
    }

    static int count(int f, int s) {
        if (f == -1) return 0;  
        return s - f + 1;       
    }
}
