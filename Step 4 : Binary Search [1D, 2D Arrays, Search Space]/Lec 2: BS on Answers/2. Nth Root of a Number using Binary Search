Brute : o(n) and o(1)

class Solution {
    public int nthRoot(int n, int m) {
        for (int i = 1; i <= m; i++) {
            // Compute i^n
            long power = (long) Math.pow(i, n);

            if (power == m) return i;
            if (power > m) break;
        }
        return -1;
    }
}

optimal o(log n) and o(1)

class Solution {
    public int nthRoot(int n, int m) {
        int low = 1, high = m;
        while (low <= high) {
            int mid = (low + high) / 2;
            long ans = 1;
            for (int i = 0; i < n; i++) {
                ans *= mid;
                if (ans > m) break;
            }
            if (ans == m) return mid;
            if (ans < m) low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }
}
