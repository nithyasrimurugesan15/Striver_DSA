https://leetcode.com/problems/count-primes/

brute : tle

time :  O(nâˆšn)
space : o(1)

 class Solution {
  public int countPrimes(int n) {
    if(n<0)
    {
        return 0;
    }
   
    int c=0;
    for(int i=2;i<n;i++)
    {
        boolean f=true;
       for(int j=2;j*j<=i;j++)
       {
        if(i%j==0)
        {
            f=false;
        }
       }
       if(f)
       {
        c++;
       }
    }
    return c;
  }
 }


 optimal : Sieve of Eratosthenes

time :  O(n log log n)
space : O(n)

 class Solution {
  public int countPrimes(int n) {
    if (n <= 2)
      return 0;
    boolean[] isPrime = sieveEratosthenes(n);
    int ans = 0;
    for(int i=2;i<n;i++)
    {
        if(isPrime[i])
        {
            ans++;
        }
    }
    return ans;
  }

  private boolean[] sieveEratosthenes(int n) {
    boolean[] isPrime = new boolean[n];
    Arrays.fill(isPrime, true);
    isPrime[0] = false;
    isPrime[1] = false;
    for (int i = 2; i * i < n; ++i)
      if (isPrime[i])
        for (int j = i * i; j < n; j += i)
          isPrime[j] = false;
    return isPrime;
  }
}
