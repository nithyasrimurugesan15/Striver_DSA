Approach 1 : prefer -> optimal

// T.C : O(1)
// S.C : O(1)

DO IN EITHER LEFT SHIFT OR RIGHT SHIFT

// class Main {
//     public static void main(String[] args) {
//         int n=10;
//         int i=2;
//         if((n&(1<<i))==0)
//         {
//             System.out.println("0");
//         }
//         else
//         {
//           System.out.println("1");
            
//         }
//     }
// }


class Main {
    public static void main(String[] args) {
        int n=10;
        int i=1;
        if((n>>i&1)==0)
        {
            System.out.println("0");
        }
        else
        {
           System.out.println("1");
            
        }
    }
}


Approach 2 -> using builtin fun
 T.C : O(log n)
 S.C : O(log n)

class Main {
    public static void main(String[] args) {
        int n=10;
        int i=1;
       String binary = Integer.toBinaryString(n); 
         if (i >= binary.length())
         {
             System.out.print("false");
         }
        if(binary.charAt(binary.length() - 1 - i) == '1')
        {
            System.out.print("true");
        }
        else
        {
            System.out.print("false");
        }
    }
}


