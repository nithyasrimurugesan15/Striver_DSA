https://leetcode.com/problems/remove-duplicates-from-sorted-array/

Approach 1 : brute -> to store unique elements so use hashset b/t not preserve order so use LinkedHashSet to preserve order.

time : o(n)+o(k) -> o(n)
space : o(n)

class Solution {
    public int removeDuplicates(int[] nums) {

        LinkedHashSet<Integer> s=new LinkedHashSet<>();
        for(int i=0;i<nums.length;i++)
        {
            s.add(nums[i]);
        }
        int i=0;
        for(int x: s)
        {
            nums[i++]=x;
        }
        return s.size();
    }
}

Approach 2 : optimal -> using two pointers -> i,j

time : o(n)
space : o(1)

class Solution {
public int removeDuplicates(int[] nums) {
    int i=0;
    for (int j=1;j<nums.length;j++)
    {
        if(nums[i]!=nums[j])
        {
            i++;
            nums[i]=nums[j];
        }
    }
    return i+1;
}

}
