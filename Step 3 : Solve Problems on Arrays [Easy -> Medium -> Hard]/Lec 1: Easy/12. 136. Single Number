https://leetcode.com/problems/single-number/description/

4 Approaches are there -> 1. brute -> better 1 -> better 2 -> optimal

1. Brute

time : o(n^2) and space o(1)

class Solution {
    public int singleNumber(int[] arr) {
        int n=arr.length;
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (arr[j] == arr[i])
                    cnt++;
            }
            if (cnt == 1) return arr[i];
        }
        return -1;
    }
}

2. BETTER 1 

time : o(n)+O(n)+o(n) = o(n) and space o(1)

 class Solution {
   public int singleNumber(int[] arr) {
     int n = arr.length;

        int maxi = arr[0];
        for (int i = 0; i < n; i++) {
            maxi = Math.max(maxi, arr[i]);
        }
      int[] hash = new int[maxi + 1];
        for (int i = 0; i < n; i++) {
            hash[arr[i]]++;
        }
        for (int i = 0; i < n; i++) {
            if (hash[arr[i]] == 1)
                return arr[i];
        }
        return -1;
    }
    }

3. BETTER 2 

time : o(n log n) and space o(m)

class Solution {
   public int singleNumber(int[] arr) {
       int n = arr.length;
        HashMap<Integer, Integer> mpp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int value = mpp.getOrDefault(arr[i], 0);
            mpp.put(arr[i], value + 1);
        }
        for (Map.Entry<Integer, Integer> it : mpp.entrySet()) {
            if (it.getValue() == 1) {
                return it.getKey();
            }
        }
        return -1;
    }
    }


4. OPTIMAL 

time : o(n) and space o(1)

Class Solution {
    public int singleNumber(int[] nums) {
        int res=0;
        for(int i:nums)
        {
            res^=i;
        }
        return res;
    }
}
