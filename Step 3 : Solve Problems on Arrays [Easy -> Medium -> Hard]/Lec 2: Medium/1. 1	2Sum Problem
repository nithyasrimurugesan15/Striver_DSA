Brute :

time : o(n^2) and space o(1)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return new int[]{i,j};
                }
            }
        }
        return null;
    }
}

Optimal : 

time : o(n log n) and space o(n)

class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {

        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            int diff=target-nums[i];
            if(hm.containsKey(diff))
            {
               return new int[]{hm.get(diff),i};
            }
            else
            {
                hm.put(nums[i],i);
            }
        }
        return new int[]{};
      
    }
}

optimal : two pointers 

1. (accessing index nah -> use 2d arrays to store ele and index then sort and use two pointers bcoz if not give original index it give sorted index)
time : o(n log n) and space o(n)

2. (checking yes/no ->sort and use two pointers)
time : o(n log n) and space o(1) -> bcoz not using arr to store original index.

1.
class Solution {
    public int[] twoSum(int[] nums, int target)
    {
        int[][] arr=new int[nums.length][2];
        for(int i=0;i<arr.length;i++)
        {
            arr[i][0]=nums[i];
            arr[i][1]=i;
        }
        Arrays.sort(arr,(a,b) -> Integer.compare(a[0],b[0]));
        int l=0;
        int r=nums.length-1;
        while(l<r)
        {
            int sum=arr[l][0]+arr[r][0];
            if(sum==target)
            {
                return new int[]{arr[l][1],arr[r][1]};
            }
            else if(sum>target)
            {
                r--;
            }
            else
            {
                l++;
            }
        }
        return new int[]{-1,-1};
    }
}

2.
public class Main {
    public static String twoSum(int n, int []arr, int target) {
        Arrays.sort(arr);
        int left = 0, right = n - 1;
        while (left < right) {
            int sum = arr[left] + arr[right];
            if (sum == target) {
                return "YES";
            } else if (sum < target) left++;
            else right--;
        }
        return "NO";
    }

